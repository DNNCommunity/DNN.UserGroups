<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>User Group Spotlight Settings</value>
  </data>
  <data name="dnnlblGroupPage.Help" xml:space="preserve">
    <value>The page that contains the user group module.</value>
  </data>
  <data name="dnnlblGroupPage.Text" xml:space="preserve">
    <value>User Group Page</value>
  </data>
  <data name="dnnlblMeetingMaxDayCount.Help" xml:space="preserve">
    <value>This is the maximum number of days the group must have a meeting within. </value>
  </data>
  <data name="dnnlblMeetingMaxDayCount.Text" xml:space="preserve">
    <value>Meeting In Next (in days)</value>
  </data>
  <data name="dnnlblModule.Help" xml:space="preserve">
    <value>The user group module on the user group page.</value>
  </data>
  <data name="dnnlblModule.Text" xml:space="preserve">
    <value>User Group Module</value>
  </data>
  <data name="dnnlblRequireMeetingAddress.Help" xml:space="preserve">
    <value>Determines if a meeting location is required in order for group to be displayed in spotlight rotation.</value>
  </data>
  <data name="dnnlblRequireMeetingAddress.Text" xml:space="preserve">
    <value>Require Meeting Location</value>
  </data>
  <data name="dnnlblTemplate.Help" xml:space="preserve">
    <value>This is parsed and used to format content within the rotator spotlight.</value>
  </data>
  <data name="dnnlblTemplate.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>&lt;None Specified&gt;</value>
  </data>
  <data name="lblPageSize.Help" xml:space="preserve">
    <value>The number of items to include in the rotator.</value>
  </data>
  <data name="lblPageSize.Text" xml:space="preserve">
    <value>Page Size</value>
  </data>
  <data name="lblFrameDuration.Help" xml:space="preserve">
    <value>The time each frame will be displayed in automatica scrolling scenarios (in milliseconds). </value>
  </data>
  <data name="lblFrameDuration.Text" xml:space="preserve">
    <value>Frame Duration</value>
  </data>
  <data name="lblItemHeight.Help" xml:space="preserve">
    <value>This is the height of the templated content area. If you wanted to repeat items vertically, you would double the Widget Height here.</value>
  </data>
  <data name="lblItemHeight.Text" xml:space="preserve">
    <value>Item Height</value>
  </data>
  <data name="lblItemWidth.Help" xml:space="preserve">
    <value>This is the width of the templated content area. If you wanted to repeate items horizontally, you would dobule the Widget Width here.</value>
  </data>
  <data name="lblItemWidth.Text" xml:space="preserve">
    <value>Item Width</value>
  </data>
  <data name="lblRotatorType.Help" xml:space="preserve">
    <value>The type of rotator transition that will occur. </value>
  </data>
  <data name="lblRotatorType.Text" xml:space="preserve">
    <value>Rotator Type</value>
  </data>
  <data name="lblScrollDirection.Help" xml:space="preserve">
    <value>The direction the items will be rotated.</value>
  </data>
  <data name="lblScrollDirection.Text" xml:space="preserve">
    <value>Scroll Direction</value>
  </data>
  <data name="lblScrollDuration.Help" xml:space="preserve">
    <value>The speed for scrolling rotator items (in milliseconds). </value>
  </data>
  <data name="lblScrollDuration.Text" xml:space="preserve">
    <value>Scroll Duration</value>
  </data>
  <data name="lblWidgetHeight.Help" xml:space="preserve">
    <value>This is the full height the rotator area will take up (not the template content).</value>
  </data>
  <data name="lblWidgetHeight.Text" xml:space="preserve">
    <value>Widget Height</value>
  </data>
  <data name="lblWidgetWidth.Help" xml:space="preserve">
    <value>This is the full width the rotator area will take up (not the template content). </value>
  </data>
  <data name="lblWidgetWidth.Text" xml:space="preserve">
    <value>Widget Width</value>
  </data>
</root>