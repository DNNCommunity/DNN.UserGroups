
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_UserGroup_Add') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_UserGroup_Add
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_UserGroup_Update') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_UserGroup_Update
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_UserGroup_Get') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_UserGroup_Get
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_Spotlight_Search') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_Spotlight_Search
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_SearchGroupsByLocation') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_SearchGroupsByLocation
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_SearchGroups') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_SearchGroups
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_Meetings_GetGroupUpcomming') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_Meetings_GetGroupUpcomming
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_Meetings_GetAllByDate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}UserGroups_Meetings_GetAllByDate
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}UserGroups_vw_UserGroups') and OBJECTPROPERTY(id, N'IsView') = 1)
	drop view {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups
GO




IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'DefaultLanguage' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}UserGroups_UserGroups'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}UserGroups_UserGroups 
	   ADD [DefaultLanguage] [nvarchar](10) NULL
	END
GO

CREATE VIEW {databaseOwner}[{objectQualifier}UserGroups_vw_UserGroups]
AS
	SELECT  ug.UserGroupID,
		   ug.LeaderID,
		   ug.Name,
		   ug.Country,
		   ug.Region,
		   ug.City,
		   ug.Url,
		   ug.Logo,
		   ug.Latitude,
		   ug.Longitude,
		   ( SELECT    COUNT(*) AS Expr1
			FROM      {databaseOwner}{objectQualifier}UserGroups_UserGroupUser
			WHERE     ( UserGroupID = ug.UserGroupID )
		   ) AS Members,
		   ug.TwitterUrl,
		   ug.LinkedInUrl,
		   ug.FacebookUrl,
		   ug.About,
		   ug.PortalID,
		   ug.CreatedByUserID,
		   ug.CreatedOnDate,
		   ug.LastModifiedByUserID,
		   ug.LastModifiedOnDate,
		   ug.LanguageID,
		   ug.Active,
		   [Language] AS LanguageName,
		   ug.MeetingAddress,
		   ug.ContentItemID,
		   CI.TabID,
		   ug.ModuleID,
		   CI.ContentKey,
		   CI.Indexed,
		   CI.[Content],
		   CI.ContentTypeID,
		   ug.DefaultLanguage
	FROM    {databaseOwner}{objectQualifier}UserGroups_UserGroups AS ug
		   INNER JOIN {databaseOwner}{objectQualifier}UserGroups_Language ON ug.LanguageID = dbo.UserGroups_Language.LanguageID
		   LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON ug.ContentItemID = CI.ContentItemID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_UserGroup_Add]
    @PortalID INT,
    @LeaderID INT,
    @Name NVARCHAR(50),
    @Country NVARCHAR(50),
    @Region NVARCHAR(50),
    @City NVARCHAR(50),
    @Url NVARCHAR(100),
    @Logo NVARCHAR(100),
    @Active BIT,
    @Latitude FLOAT,
    @Longitude FLOAT,
    @TwitterUrl NVARCHAR(100),
    @LinkedInUrl NVARCHAR(100),
    @FacebookUrl NVARCHAR(100),
    @About NVARCHAR(200),
    @LanguageID INT,
    @CreatedByUserID INT,
    @CreatedOnDate DATETIME,
    @ModuleID INT,
    @MeetingAddress NVARCHAR(200),
    @DefaultLanguage NVARCHAR(10)
AS 
    INSERT  INTO {databaseOwner}{objectQualifier}UserGroups_UserGroups
            (
              PortalID,
              LeaderID,
              [Name],
              Country,
              Region,
              City,
              Url,
              Logo,
              Active,
              Latitude,
              Longitude,
              TwitterUrl,
              LinkedInUrl,
              FacebookUrl,
              About,
              LanguageID,
              CreatedByUserID,
              CreatedOnDate,
              ModuleID,
              MeetingAddress,
              DefaultLanguage
	      )
    VALUES  (
              @PortalID,
              @LeaderID,
              @Name,
              @Country,
              @Region,
              @City,
              @Url,
              @Logo,
              @Active,
              @Latitude,
              @Longitude,
              @TwitterUrl,
              @LinkedInUrl,
              @FacebookUrl,
              @About,
              @LanguageID,
              @CreatedByUserID,
              @CreatedOnDate,
              @ModuleID,
              @MeetingAddress,
              @DefaultLanguage
	      )

    SELECT  SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_UserGroup_Update]
    @UserGroupID INT,
    @PortalID INT,
    @LeaderID INT,
    @Name NVARCHAR(50),
    @Country NVARCHAR(50),
    @Region NVARCHAR(50),
    @City NVARCHAR(50),
    @Url NVARCHAR(100),
    @Logo NVARCHAR(100),
    @Active BIT,
    @Latitude FLOAT,
    @Longitude FLOAT,
    @TwitterUrl NVARCHAR(100),
    @LinkedInUrl NVARCHAR(100),
    @FacebookUrl NVARCHAR(100),
    @About NVARCHAR(200),
    @LanguageID INT,
    @LastModifiedByUserID INT,
    @LastModifiedOnDate DATETIME,
    @MeetingAddress NVARCHAR(200),
    @ContentItemID INT,
    @DefaultLanguage NVARCHAR(10)
AS 
    UPDATE  {databaseOwner}{objectQualifier}UserGroups_UserGroups
    SET     LeaderID = @LeaderID,
            [Name] = @Name,
            Country = @Country,
            Region = @Region,
            City = @City,
            Url = @Url,
            Logo = @Logo,
            Active = @Active,
            Latitude = @Latitude,
            Longitude = @Longitude,
            TwitterUrl = @TwitterUrl,
            LinkedInUrl = @LinkedInUrl,
            FacebookUrl = @FacebookUrl,
            About = @About,
            LanguageID = @LanguageID,
            LastModifiedByUserID = @LastModifiedByUserID,
            LastModifiedOnDate = @LastModifiedOnDate,
            MeetingAddress = @MeetingAddress,
            ContentItemID = @ContentItemID,
            DefaultLanguage = @DefaultLanguage
    WHERE   UserGroupID = @UserGroupID
            AND PortalID = @PortalID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_UserGroup_Get] @UserGroupID INT
AS 
    SELECT  UserGroupID,
            ModuleID,
            LeaderID,
            Name,
            Country,
            Region,
            City,
            Url,
            Logo,
            Latitude,
            Longitude,
            Members,
            TwitterUrl,
            LinkedInUrl,
            FacebookUrl,
            About,
            PortalID,
            CreatedByUserID,
            CreatedOnDate,
            LastModifiedByUserID,
            LastModifiedOnDate,
            LanguageID,
            LanguageName,
            Active,
            MeetingAddress,
            TabID,
            ContentItemID,
            ContentTypeID,
            ContentKey,
            Indexed,
            Content,
		  DefaultLanguage,
            ( SELECT    Username
              FROM      {databaseOwner}{objectQualifier}Users
              WHERE     UserID = LeaderID
            ) AS LeaderUsername,
            ( SELECT    DisplayName
              FROM      {databaseOwner}{objectQualifier}Users
              WHERE     UserID = LeaderID
            ) AS LeaderDisplayName,
            1 AS TotalRecords
    FROM    {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups
    WHERE   UserGroupID = @UserGroupID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_Spotlight_Search]
    @PortalID INT,
    @PageSize INT,
    @PageIndex INT,
    @NextDays INT,
    @RequireMeetingLocation BIT
AS 
    DECLARE @RowStart INT 
    DECLARE @RowEnd INT 

    SET @RowStart = @PageSize * @PageIndex + 1 ; 
    SET @RowEnd = @RowStart + @PageSize - 1 ; 
        
    IF @RequireMeetingLocation = 1 
        BEGIN
            SELECT  *
            FROM    ( SELECT    UM.UserGroupID,
                                Title,
                                [Description],
                                Location,
                                MapUrl,
                                MeetingDate,
                                EventID,
                                DefaultLanguage,
                                ROW_NUMBER() OVER ( ORDER BY MeetingDate DESC ) AS RowNumber
                      FROM      {databaseOwner}{objectQualifier}UserGroups_UserGroupMeeting UM
                                INNER JOIN {databaseOwner}{objectQualifier}UserGroups_UserGroups UG ON UM.UserGroupID = UG.UserGroupID
                      WHERE     PortalID = @PortalID
                                AND MeetingDate >= GETDATE()
                                AND MeetingDate < DATEADD(dd, @NextDays,
                                                          GETDATE())
                                AND Location != NULL
                    ) AS MeetingInfo
            WHERE   RowNumber >= @RowStart
                    AND RowNumber <= @RowEnd 
        END
    ELSE 
        BEGIN
            SELECT  *
            FROM    ( SELECT    UM.UserGroupID,
                                Title,
                                [Description],
                                Location,
                                MapUrl,
                                MeetingDate,
                                EventID,
                                DefaultLanguage,
                                ROW_NUMBER() OVER ( ORDER BY MeetingDate DESC ) AS RowNumber
                      FROM      {databaseOwner}{objectQualifier}UserGroups_UserGroupMeeting UM
                                INNER JOIN {databaseOwner}{objectQualifier}UserGroups_UserGroups UG ON UM.UserGroupID = UG.UserGroupID
                      WHERE     PortalID = @PortalID
                                AND MeetingDate >= GETDATE()
                                AND MeetingDate < DATEADD(dd, @NextDays,
                                                          GETDATE())
                    ) AS MeetingInfo
            WHERE   RowNumber >= @RowStart
                    AND RowNumber <= @RowEnd 
        END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_SearchGroupsByLocation]
    @PortalID INT,
    @Lat FLOAT,
    @Long FLOAT,
    @Distance INT,
    @InKilometers BIT,
    @PropertyDefinitionID INT
AS 
    BEGIN
        CREATE TABLE #Listings
            (
              UserGroupID INT,
              Latitude FLOAT,
              Longitude FLOAT,
              Distance DECIMAL(18, 12)
            )
        INSERT  INTO #Listings
                (
                  UserGroupID,
                  Latitude,
                  Longitude,
                  Distance
                )
                SELECT  UserGroupID,
                        Latitude,
                        Longitude,
                        {databaseOwner}{objectQualifier}{databaseOwner}{objectQualifier}UserGroups_CalcDistanceBetweenLocations(@Lat, @Long, Latitude, Longitude, @InKilometers) AS Distance
                FROM    {databaseOwner}{objectQualifier}UserGroups_UserGroups
                WHERE   {databaseOwner}{objectQualifier}UserGroups_CalcDistanceBetweenLocations(@Lat, @Long, Latitude, Longitude, @InKilometers) <= @Distance
                ORDER BY Distance ASC
    
        SELECT  TOP 100 UG.UserGroupID,
                LeaderID,
                Name,
                Country,
                Region,
                City,
                Url,
                UG.Latitude,
                UG.Longitude,
                TwitterUrl,
                LinkedInUrl,
                FacebookURL,
                LanguageName,
                Distance,
                TabID,
                ModuleID,
                DefaultLanguage,
                Members,
                ( SELECT    Username
                  FROM      {databaseOwner}{objectQualifier}Users
                  WHERE     UserID = LeaderID
                ) AS LeaderUsername,
                ( SELECT    DisplayName
                  FROM      {databaseOwner}{objectQualifier}Users
                  WHERE     UserID = LeaderID
                ) AS LeaderDisplayName,
                ( SELECT    ISNULL(PropertyValue, -1)
                  FROM      {databaseOwner}{objectQualifier}UserProfile
                  WHERE     PropertyDefinitionID = @PropertyDefinitionID
                            AND UserID = LeaderID
                ) AS AvatarFileID
        FROM    #Listings L
                INNER JOIN {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups UG ON L.UserGroupID = UG.UserGroupID
                WHERE Active = 1
		ORDER BY Distance ASC
    END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_SearchGroups]
    @PortalID INT,
    @PageIndex INT,
    @PageSize INT,
    @Country NVARCHAR(50),
    @Region NVARCHAR(50),
    @City NVARCHAR(50),
    @Name NVARCHAR(50),
    @LanguageID INT,
    @PropertyDefinitionID INT
AS 
    BEGIN
        DECLARE @RowStart INT 
        DECLARE @RowEnd INT 
                
        SET @RowStart = @PageSize * @PageIndex + 1 ; 
        SET @RowEnd = @RowStart + @PageSize - 1 ; 

        IF @LanguageID = -1 
            SET @LanguageID = NULL
        
        SELECT  *
        FROM    ( SELECT    UserGroupID,
                            LeaderID,
                            Name,
                            Country,
                            Region,
                            City,
                            Url,
                            Logo,
                            Active,
                            Latitude,
                            Longitude,
                            TwitterUrl,
                            LinkedInUrl,
                            FacebookUrl,
                            About,
                            LanguageID,
                            LanguageName,
                            PortalID,
                            CreatedByUserID,
                            CreatedOnDate,
                            LastModifiedByUserID,
                            LastModifiedOnDate,
                            Members,
                            DefaultLanguage,
                            ROW_NUMBER() OVER ( ORDER BY Country, City ) AS RowNumber,
                            ( SELECT    Username
                              FROM      {databaseOwner}{objectQualifier}Users
                              WHERE     UserID = LeaderID
                            ) AS LeaderUsername,
                            ( SELECT    DisplayName
                              FROM      {databaseOwner}{objectQualifier}Users
                              WHERE     UserID = LeaderID
                            ) AS LeaderDisplayName,
                            ContentItemID,
                            ContentKey,
                            ModuleID,
                            TabID,
                            Indexed,
                            Content,
                            ContentTypeID,
                            ( SELECT    COUNT(*)
                              FROM      {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups
                              WHERE     PortalID = @PortalID
                                        AND ( @LanguageID IS NULL
                                              OR LanguageID = LanguageID
                                            )
                                        AND ( @Country IS NULL
                                              OR Country = @Country
                                            )
                                        AND ( @Region IS NULL
                                              OR Region = @Region
                                            )
                                        AND ( @City IS NULL
                                              OR City = @City
                                            )
                                        AND ( @Name IS NULL
                                              OR Name = @Name
                                            )
                            ) AS TotalRecords,
                            ( SELECT    ISNULL(PropertyValue, -1)
                              FROM      {databaseOwner}{objectQualifier}UserProfile
                              WHERE     PropertyDefinitionID = @PropertyDefinitionID
                                        AND UserID = LeaderID
                            ) AS AvatarFileID
                  FROM      {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups
                  WHERE     PortalID = @PortalID
                            AND ( @LanguageID IS NULL
                                  OR LanguageID = LanguageID
                                )
                            AND ( @Country IS NULL
                                  OR Country = @Country
                                )
                            AND ( @Region IS NULL
                                  OR Region = @Region
                                )
                            AND ( @City IS NULL
                                  OR City = @City
                                )
                            AND ( @Name IS NULL
                                  OR Name = @Name
                                )
                ) AS GroupInfo
        WHERE   RowNumber >= @RowStart
                AND RowNumber <= @RowEnd 
    END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_Meetings_GetGroupUpcomming]
    @UserGroupID INT,
    @StartDate DATETIME,
    @PageSize INT,
    @PageIndex INT
AS 
    SELECT  UG.UserGroupID,
            MeetingID,
            MeetingDate,
            MeetingAddress,
            [Description],
            Location,
            Title,
            TabID,
            ModuleID,
            EventID,
            UM.CreatedByUserID,
            UM.CreatedOnDate,
            UM.LastModifiedByUserID,
            UM.LastModifiedOnDate,
            DefaultLanguage,
            ( SELECT    COUNT(UG.UserGroupID)
              FROM      {databaseOwner}{objectQualifier}UserGroups_UserGroupMeeting UG
                        LEFT JOIN {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups UM ON UG.UserGroupID = UM.UserGroupID
              WHERE     UG.UserGroupID = @UserGroupID
                        AND MeetingDate > @StartDate
            ) AS TotalRecords
    FROM    {databaseOwner}{objectQualifier}UserGroups_UserGroupMeeting UG
            LEFT JOIN {databaseOwner}{objectQualifier}UserGroups_vw_UserGroups UM ON UG.UserGroupID = UM.UserGroupID
    WHERE   UG.UserGroupID = @UserGroupID
            AND MeetingDate > @StartDate
    ORDER BY MeetingDate ASC
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserGroups_Meetings_GetAllByDate]
    @PortalID INT,
    @StartDate DATETIME,
    @EndDate DATETIME,
    @Region NVARCHAR(50),
    @PageIndex INT,
    @PageSize INT
AS 
    BEGIN
        DECLARE @RowStart INT 
        DECLARE @RowEnd INT 
                
        SET @RowStart = @PageSize * @PageIndex + 1 ; 
        SET @RowEnd = @RowStart + @PageSize - 1 ; 
        	
        IF @Region = -1 
            SET @Region = NULL
            
        SELECT  *
        FROM    ( SELECT    UG.UserGroupID,
                            MeetingID,
                            MapUrl,
                            Location,
                            Title,
                            MeetingDate,
                            [Name],
                            DefaultLanguage,
                            ROW_NUMBER() OVER ( ORDER BY MeetingDate ASC ) AS RowNumber
                  FROM      {databaseOwner}{objectQualifier}UserGroups_UserGroupMeeting UGM
                            INNER JOIN {databaseOwner}{objectQualifier}UserGroups_UserGroups UG ON UGM.UserGroupID = UG.UserGroupID
                  WHERE     MeetingDate >= @StartDate
                            AND MeetingDate <= @EndDate
                            AND PortalID = @PortalID
                            AND ( @Region IS NULL
                                  OR Region = Region
                                )
                ) AS MeetingInfo
        WHERE   RowNumber >= @RowStart
                AND RowNumber <= @RowEnd 
                
        SELECT  TotalRecords = COUNT(*)
        FROM    {databaseOwner}{objectQualifier}UserGroups_UserGroupMeeting UGM
                INNER JOIN {databaseOwner}{objectQualifier}UserGroups_UserGroups UG ON UGM.UserGroupID = UG.UserGroupID
        WHERE   MeetingDate >= @StartDate
                AND MeetingDate <= @EndDate
                AND PortalID = @PortalID
                AND ( @Region IS NULL
                      OR Region = Region
                    )
    END
GO

